参考URL:https://qiita.com/mima_ita/items/55394bcc851eb8b6dc24

単体テスト

1.VisualStudioにてテストプロジェクトを追加する。
2.UnitTestを記述する。
3.テストを実行する
4.テストエクスプローラーで結果を確認


様々なAssert機能

// 値が等しいとテストに成功する
Assert.AreEqual(予測値, 実行結果)
// オブジェクト参照が同じときにオブジェクトが成功する
Assert.Same(予測値, 実行結果)
// 値が等しくない時にテストが成功する
Assert.AreNotEqual(予測値, 実行結果);

// falseだとテストが成功する
Assert.IsFalse(実行結果)
// trueだとテストが成功する
Assert.IsTrue(実行結果)

// 実行結果が予測される型の場合テストが成功する
Assert.IsInstanceOfType(実行結果、予測される型)

// Nullじゃない時にテストが成功する
Assert.IsNotNull(実行結果)
// Nullの場合テストが成功する
Assert.IsNull(実行結果)

// 呼ぶとテストが必ず失敗する
Assert.Fail("メッセージ")


テスト前準備、後処理

    // クラス内のテストの開始前に呼ばれる
    [ClassInitialize]
    public static void ClassInitialize(TestContext context)
    {
        // クラスの前処理
    }
    <TestInitialize> Public Sub TestInitialize()
		// クラスの前処理
        SNMClass = New BarcodeReceptionAssistant.SerialNumberManager



    End Sub
    
    <TestMethod()> Public Sub TestMethod1()



        Assert.IsTrue(True)
    End Sub

    // クラス内のテストが終わった時に呼ばれる
    <TestCleanup> Public Sub TestCleanup()
		// クラスの後処理
    End Sub    







プライベートメソッドテスト

        Dim pbObj = New PrivateObject(SNMClass)
        pbObj.Invoke("メソッド名", 引数)
        actual = pbObj.GetField("プリベート変数")





実行時間を指定する




テストデータの利用

System.Dataが必要なので参照に追加

2.CSVをテストプロジェクトの直下にフォルダを構成して配置する
3.追加したCSVのプロパティで、テストデータを「出力ディレクトリ―」にコピーするようにする。
4.テストコードを記述する


        public TestContext TestContext { get; set; }

        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.CSV", @"|DataDirectory|\TestData\Test001\test.csv", "test#csv", DataAccessMethod.Sequential)]
        public void TestCsv()
        {
            int a = (int)TestContext.DataRow["a"];
            int b = (int)TestContext.DataRow["b"];
            int result = (int)TestContext.DataRow["result"];
            System.Diagnostics.Trace.WriteLine("TestCsv " + a + " " + b + " " + result);
            Assert.AreEqual(result, a + b);
        }




